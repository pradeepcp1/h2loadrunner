{
  "$schema":"http://json-schema.org/draft-04/schema#",
  "description":" h2loadrunner configuration",
  "title":"h2loadrunner_configuration",
  "type":"object",
  "properties":{
    "schema":{
      "description":"schema of the uri, http, or https",
      "type":"string"
    },
    "host":{
      "description":"host part, for example: 192.168.1.1, or, www.h2loadrunner.com",
      "type":"string"
    },
    "port":{
      "description":"port, 80, 443 ,etc.",
      "type":"integer"
    },
    "threads":{
      "description":"Number of native threads. Each thread can serve multiple connections (clients)",
      "default": 1,
      "type":"integer"
    },
    "clients":{
      "description":"Total number of concurrent clients. If working together with rate field, this field specifies the total number of connections to be made. This field must have value no less than threads field.",
      "default": 1,
      "type":"integer"
    },
    "duration":{
      "description":"Specifies the duration (in second) for timing-based benchmarking. The duration field and the rate field are mutually exclusive.",
      "type":"integer"
    },
    "total-requests":{
      "description":"Number of requests across all clients. This field is ignored if duration field has a positive value, and this field must have a positive value if duration field does not",
      "default": 1,
      "type":"integer"
    },
    "warm-up-time":{
      "description":"Specifies the time period (in second) before starting the actual measurements, in case of timing-based benchmarking. Needs non-zero value in duration field for warm-up-time field to work.",
      "type":"integer"
    },
    "max-concurrent-streams":{
      "description":"max-concurrent-streams for each connection, ignored for http 1.x test",
      "default": 1,
      "type":"integer"
    },
    "request-per-second":{
      "description":"Specifies request per second for each client(connection). If no value is given in this field, it will try to send as many as possible requests for each client(connection)",
      "type":"number"
    },
    "rate":{
      "description":"Specifies a fixed rate at which connections are created. It must be a positive integer, representing the number of connections to be made per rate-period. The maximum number of connections to be made is given in clients field. This rate will be distributed among threads as evenly as possible. For example, with thread=2 and rate=4, each thread gets 2 connections per rate-period, until total number of connections specified in clients field is reached.  When the rate is 0, the program will run as it normally does, creating connections at whatever variable rate it wants. The duration field and the rate field are mutually exclusive.",
      "default": 0,
      "type":"integer"
    },
    "rate-period":{
      "description":"Specifies the time period between connection creating connections. The period must be a positive number, representing the length of the period in time. This option is ignored if the rate option is not used.",
      "default": 1,
      "type":"integer"
    },
    "stream-timeout":{
      "description":"Specifies the maximum time (ms) that h2loadrunner would wait for response before resetting a stream. This field is not applicable for http 1.x test",
      "default": 5000,
      "type":"integer"
    },
    "variable-name-in-path-and-data":{
      "description":"Specified the variable name in uri path and payload, which is to be replaced with an actual user ID specified next.",
      "type":"string"
    },
    "variable-range-start":{
      "description":"Specify variable range start.",
      "type":"integer"
    },
    "variable-range-end":{
      "description":"Specify variable range end.",
      "type":"integer"
    },
    "ciphers":{
      "description":"Set allowed cipher list. The format of the string is described in OpenSSL ciphers(1)",
      "type":"string",
      "default":"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256"
    },
    "no-tls-proto":{
      "description":"Specify ALPN identifier of the protocol to be used when accessing http URI without SSL/TLS. Available protocols: h2c and http/1.1",
      "type":"string",
      "default":"h2c"
    },
    "connection-active-timeout":{
      "description":"Specifies the maximum time (ms) that h2loadrunner is willing to keep a connection open, regardless of the activity on said connection. It must be a positive integer, specifying the amount of time to wait. When no timeout value is set (either active or inactive), the tool will keep a connection open indefinitely, waiting for a response.",
      "type":"integer"
    },
    "connection-inactivity-timeout":{
      "description":"Specifies the amount of time that h2loadrunner is willing to wait to see activity on a given connection. It must be a positive integer, specifying the amount of time to wait. When no timeout value is set (either active or inactive), the tool will keep a connection open indefinitely, waiting for a response.",
      "type":"integer"
    },
    "npn-list":{
      "description":"Comma delimited list of ALPN protocol identifier sorted in the order of preference. That means most desirable protocol comes first. This is used in both ALPN and NPN. The parameter must be delimited by a single comma only and any white spaces are treated as a part of protocol string.",
      "type":"string",
      "default":"h2,h2-16,h2-14,http/1.1"
    },
    "header-table-size":{
      "description":"Specify decoder header table size.",
      "default": 4096,
      "type":"integer"
    },
    "encoder-header-table-size":{
      "description":"Specify encoder header table size. The decoder (server) specifies the maximum dynamic table size it accepts. Then the negotiated dynamic table size is the minimum of this option value and the value which server specified.",
      "default": 4096,
      "type":"integer"
    },
    "log-file":{
      "description":"Write per-request information to a file",
      "type":"string"
    },
    "window-bits":{
      "description":"Sets the stream level initial window size to (2**<N>)-1",
      "default": 30,
      "type":"integer"
    },
    "connection-window-bits":{
      "description":"Sets the connection level initial window size to (2**<N>)-1",
      "default": 30,
      "type":"integer"
    },
    "scenario":{
      "description":"Array of requests, each request has path, method, optional payload, optional addtional headers, and optionally an lua script for advanced users to customize the request",
      "type":"array",
      "minItems":1,
      "items": {
      "type": "object",
        "properties":{
          "path":{
            "description": "path of the uri",
            "type":"object",
            "properties":{
              "typeOfAction": {
                "type":"string",
                "description": "Specifies how to generate the path. input: direct input the path header in input field next; sameWithLastOne: same path header with last request; fromResponseHeader: extract the path (URI w/ host part) for this request from a specific header (name specified in input field) of last response; fromLuaScript: path is generated from lua script (see field luaScript); fromXpath: Search XML body of last response for the XPATH value given in input field (to be implemented); fromJsonPointer: Search Json body of last response body for the Json pointer value given in input field (to be implemented)",
                "enum": ["input", "sameWithLastOne", "fromResponseHeader", "fromLuaScript", "fromXPath", "fromJsonPointer"]
              },
              "input": {
                "description": "input needed to execute the typeOfAction above",
                "type":"string"
              }
            }
          },
          "clear-old-cookies":{
            "description": "clear cookies before executing this request: cookies received prior to this request, will be cleared, and will not be included in Cookie header of this request and after; Cookies header (if any) in additonalHeaders below for this request, will still be sent (but will not be passed on to next request)",
            "default": "GET",
            "type":"boolean"
          },
          "method":{
            "description": "method of the HTTP(2) request",
            "default": false,
            "type":"string"
          },
          "payload":{
            "description": "http message content, or a filename containing the actual content",
            "type":"string"
          },
          "additonalHeaders":{
          "description": "additional headers to include in this request. Valid format for each header: pair of strings with : in the middle; for example, user-agent: h2loadrunner",
          "type": "array",
          "items": {
             "type": "string"
            }
          },
          "luaScript": {
            "type":"string",
            "description": "lua script (or a filename containing the actual script) with a function named make_request, with 4 arguments: response_headers, response_payload, request_headers_to_send, request_payload_to_send; returning request_headers_to_send and request_payload_to_send. h2loadrunner passes the response headers and payload of last request within this scenarios sequence, and the request headers (path, method, additional headers) and payload specified here, to this lua function, which can update the request headers and request payload, and h2loadrunner will use the updated headers and payload for the request. Example script: function make_request(response_header, response_payload, request_headers_to_send, request_payload_to_send) return request_headers_to_send, request_payload_to_send end"
          },
          "expected-status-code": {
            "description":"the expected http status code for this request; if the returned status code matches the one specified here, this request is considered successful; if nothing specified here, 2xx status codes (i.e., 200, 201, 204, etc.) are all considered successful",
            "default": "0",
            "type":"integer"
          }
        },
        "required":[
           "path",
           "method"
        ]
      }
    }
  },
  "required":[
    "schema",
    "host",
    "scenario"
  ]
}

